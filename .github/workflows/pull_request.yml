# In steps following image build we're ignoring files uploaded to /_w/ directory as current code is in /app directory

name: CI Pull Request
on:
  pull_request:
    branches:
      - main
      - master
      - develop

concurrency:
  group: "pr-${{ github.sha }}"
  cancel-in-progress: true

env:
  FOUNDRY_PROFILE: ci

jobs:
  format:
    name: Check formatting
    runs-on: general
    container:
      image: ${{ vars.GCP_DOCKER_IMAGE_REGISTRY }}/node-extended:9cc81226
      credentials:
        username: _json_key_base64
        password: ${{ secrets.GCP_DOCKER_IMAGES_REGISTRY_SERVICE_ACCOUNT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init env
        run: yarn install

      - name: Check formatting
        run: yarn format:check

  lint:
    name: Run linter
    runs-on: general
    container:
      image: ${{ vars.GCP_DOCKER_IMAGE_REGISTRY }}/node-extended:9cc81226
      credentials:
        username: _json_key_base64
        password: ${{ secrets.GCP_DOCKER_IMAGES_REGISTRY_SERVICE_ACCOUNT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init env
        run: yarn install

      - name: Linter
        run: yarn lint

  lint-commits:
    name: Lint commits
    runs-on: general
    container:
      image: ${{ vars.GCP_DOCKER_IMAGE_REGISTRY }}/node-extended:9cc81226
      credentials:
        username: _json_key_base64
        password: ${{ secrets.GCP_DOCKER_IMAGES_REGISTRY_SERVICE_ACCOUNT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init env
        run: yarn install

      - name: Lint commits
        run: yarn lint:commits

  analyze:
    name: Analyze with Slither
    runs-on: general
    container:
      image: ${{ vars.GCP_DOCKER_IMAGE_REGISTRY }}/node-extended:9cc81226
      credentials:
        username: _json_key_base64
        password: ${{ secrets.GCP_DOCKER_IMAGES_REGISTRY_SERVICE_ACCOUNT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Init env
        run: yarn install

      - name: Run Slither
        shell: "bash {0}"
        run: |
          yarn slither:ci
          exit_code=$?
          echo '```' > $GITHUB_STEP_SUMMARY
          cat reports/slither.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          exit $exit_code

  build-image:
    name: Build Docker Image
    needs:
      - format
      - lint
      - lint-commits
      - analyze
    runs-on:
      - general
    steps:
      - uses: actions/checkout@v4
        with:
          # use some obscure path to checkout the code with service account perms
          # this is possible as $GITHUB_WORKSPACE is owned by the same service
          # account
          # see: https://github.com/actions/checkout/issues/211
          path: __local

      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          registry: europe-docker.pkg.dev
          username: _json_key_base64
          password: ${{ secrets.GCP_DOCKER_IMAGES_REGISTRY_SERVICE_ACCOUNT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.GCP_DOCKER_IMAGE_REGISTRY }}/ci/core
          tags: |
            type=ref,event=pr
            type=sha,prefix=,format=long

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: __local
          file: __local/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ vars.GCP_DOCKER_IMAGE_REGISTRY }}/ci/core:buildcache
          cache-to: type=registry,ref=${{ vars.GCP_DOCKER_IMAGE_REGISTRY }}/ci/core:buildcache,mode=max

  # Technically we don't need to build step is done during the docker build
  build:
    name: Build
    needs: build-image
    runs-on: general
    container:
      image: ${{ vars.GCP_DOCKER_IMAGE_REGISTRY }}/ci/core:${{ github.sha }}
      credentials:
        username: _json_key_base64
        password: ${{ secrets.GCP_DOCKER_IMAGES_REGISTRY_SERVICE_ACCOUNT }}

    steps:
      - name: Build
        run: "cd /app; yarn build"

  test:
    name: Test suite
    needs: build-image
    runs-on: general
    container:
      image: ${{ vars.GCP_DOCKER_IMAGE_REGISTRY }}/ci/core:${{ github.sha }}
      credentials:
        username: _json_key_base64
        password: ${{ secrets.GCP_DOCKER_IMAGES_REGISTRY_SERVICE_ACCOUNT }}
    permissions:
      contents: read
      actions: read
      checks: write
    steps:
      - name: Run tests
        env:
          TEST_RPC_URL: "${{ vars.TENDERLY_MAINNET_RPC_URL }}"
          TEST_SAFE_SINGLETON: "0x41675C099F32341bf84BFc5382aF534df5C7461a"
          TEST_SAFE_PROXY_FACTORY: "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67"
          TEST_RPC_URL_POLYGON: "https://polygon-rpc.com"
          TEST_SAFE_SINGLETON_POLYGON: "0x41675C099F32341bf84BFc5382aF534df5C7461a"
          TEST_SAFE_PROXY_FACTORY_POLYGON: "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67"
        run: "cd /app; yarn test:ci"

      - name: Upload test artifact
        uses: actions/upload-artifact@v4  # upload test results
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: test-results
          path: /app/reports/junit.xml

      - name: Prepare test report
        uses: dorny/test-reporter@v1
        if: success() || failure()        # run this step even if previous step failed
        with:
          artifact: test-results            # artifact name
          name: Tests results                # Name of the check run which will be created
          path: '*.xml'                     # Path to test results (inside artifact .zip)
          reporter: java-junit              # Format of test results

#  # Coverage fails on 'Yul exception:Variable expr is 1 too deep in the stack'
#  coverage:
#    runs-on: general
#    permissions:
#      contents: read
#      pull-requests: write
#
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: recursive
#
#      - name: Setup node
#        uses: actions/setup-node@v4
#        with:
#          node-version-file: 'package.json'
#
#      - name: Install Foundry
#        uses: onbjerg/foundry-toolchain@v1
#
#      - name: Install dependencies
#        run: "corepack enable && yarn install"
#
#      - name: Run Forge build
#        run: "forge --version && yarn build --sizes"
#
#      - name: Run forge coverage
#        id: coverage
#        env:
#          TEST_RPC_URL: "https://eth.llamarpc.com"
#          TEST_SAFE_SINGLETON: "0x41675C099F32341bf84BFc5382aF534df5C7461a"
#          TEST_SAFE_PROXY_FACTORY: "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67"
#        run: |
#          {
#          echo 'COVERAGE<<EOF'
#          forge coverage --ir-minimum --summary | awk '/Test Summary:/{y=1;next}y'
#          echo EOF
#          } >> "$GITHUB_OUTPUT"
#
#      - name: Comment on PR
#        id: comment
#        uses: actions/github-script@v7
#        with:
#          github-token: ${{ secrets.TOKEN_GITHUB }}
#          script: |
#            const output = `${{ steps.coverage.outputs.COVERAGE }}`;
#            const commentBody = `Forge code coverage:\n${output}\n`;
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: commentBody
#            });
