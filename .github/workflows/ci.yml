name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

env:
  FOUNDRY_PROFILE: ci

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        node-version:
          - 16.x

    name: Octant V2 Core Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x.x

      - name: Install Foundry
        uses: onbjerg/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run npm install
        run: "npm i"

      - name: Run Forge build
        run: "forge build"

  test:
    strategy:
      fail-fast: true

    name: Octant V2 Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x.x

      - name: Install Foundry
        uses: onbjerg/foundry-toolchain@v1

      - name: Run npm install
        run: "npm i"

      - name: Run tests
        env:
          TEST_RPC_URL: "https://eth.llamarpc.com"
          TEST_SAFE_SINGLETON: "0x41675C099F32341bf84BFc5382aF534df5C7461a"
          TEST_SAFE_PROXY_FACTORY: "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67"
        run: forge test -v

  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Slither
        uses: crytic/slither-action@v0.4.0
        id: slither
        with:
          sarif: results.sarif
          fail-on: none

  # coverage:
  #   strategy:
  #     fail-fast: true

  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     pull-requests: write

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         submodules: recursive
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Install foundry
  #       uses: foundry-rs/foundry-toolchain@v1
  #       with:
  #         version: nightly
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16.x.x
  #     - name: Run npm install
  #       run: "npm i"
  #     - name: Run Forge build
  #       run: |
  #         forge --version
  #         forge build --sizes
  #       id: build
  #     - name: Run forge coverage
  #       id: coverage
  #       run: |
  #         {
  #         echo 'COVERAGE<<EOF'
  #         forge coverage | grep -v 'test/' | tail -n +6
  #         echo EOF
  #         } >> "$GITHUB_OUTPUT"

  #     - name: Check coverage is updated
  #       uses: actions/github-script@v5
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const fs = require('fs');
  #           const file = "coverage.txt"
  #           if(!fs.existsSync(file)) {
  #             console.log("Nothing to check");
  #             return
  #           }
  #           const currentCoverage = fs.readFileSync(file, "utf8").trim();
  #           const newCoverage = (`${{ steps.coverage.outputs.COVERAGE }}`).trim();
  #           if (newCoverage != currentCoverage) {
  #             core.setFailed(`Code coverage not updated. Run : forge coverage | grep -v 'test/' | tail -n +6  > coverage.txt`);
  #           }

  #     - name: Comment on PR
  #       id: comment
  #       uses: actions/github-script@v5
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const {data: comments} = await github.rest.issues.listComments({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               issue_number: context.issue.number,
  #             })

  #           const botComment = comments.find(comment => comment.user.id === 41898282)

  #           const output = `${{ steps.coverage.outputs.COVERAGE }}`;
  #           const commentBody = `Forge code coverage:\n${output}\n`;

  #           if (botComment) {
  #             github.rest.issues.updateComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               comment_id: botComment.id,
  #               body: commentBody
  #             })
  #           } else {
  #             github.rest.issues.createComment({
  #               issue_number: context.issue.number,
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               body: commentBody
  #             });
  #           }
