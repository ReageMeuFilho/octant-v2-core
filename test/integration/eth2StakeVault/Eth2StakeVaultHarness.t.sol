// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import { SetupIntegrationTest } from "../Setup.t.sol";
import { Eth2StakeVaultHarness } from "src/dragons/eth2StakeVault/Eth2StakeVaultHarness.sol";
import { Strings } from "@openzeppelin/contracts/utils/Strings.sol";
import { console } from "forge-std/console.sol";

contract Eth2StakeVaultHarnessTest is SetupIntegrationTest {
    using Strings for uint256;
    using Strings for address;
    using Strings for bytes;

    error ERC721NonexistentToken(uint256 tokenId);

    // Test constants
    // Test validator credentials - updated to exact lengths
    bytes constant TEST_PUBKEY =
        hex"888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888";
    // 48 bytes = 96 hex characters

    bytes constant TEST_SIGNATURE =
        hex"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999";
    // 96 bytes = 192 hex characters

    bytes32 constant TEST_DEPOSIT_DATA_ROOT = 0x05c366b194111d28ec5e31077441b7478ceb7281cbce615d74084bcfead9f845;

    string constant REQUESTED_URI =
        "data:application/json;base64,eyJuYW1lIjogIlZhbGlkYXRvciBEZXBvc2l0ICMxIiwgImRlc2NyaXB0aW9uIjogIkEgVmFsaWRhdG9yIERlcG9zaXQgTkZUIHJlcHJlc2VudGluZyBhIDMyIEVUSCBkZXBvc2l0LiBDdXJyZW50IHN0YXRlOiBSZXF1ZXN0ZWQiLCAiaW1hZ2UiOiAiZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhacFpYZENiM2c5SWpBZ01DQTBNREFnTkRZd0lqNDhjbVZqZENCM2FXUjBhRDBpTkRBd0lpQm9aV2xuYUhROUlqUTJNQ0lnY25nOUlqRXlJaUJtYVd4c1BTSWpNa1V5UlRKRklpQnpkSEp2YTJVOUlpTkdOa1V3TlVVaUlITjBjbTlyWlMxM2FXUjBhRDBpTWlJdlBqeHdZWFJvSUdROUlrMHhNaUF5SUdnek56WWdZVEV3TERFd0lEQWdNQ0F4SURFd0xERXdJSFk0TnlCb0xUTTVOaUIyTFRnM0lHRXhNQ3d4TUNBd0lEQWdNU0F4TUN3dE1UQWlJR1pwYkd3OUlpTXhRVEZCTVVFaUx6NDhjR0YwYUNCa1BTSk5NVEF3SURFMk1Hd3RNekF0TVRVZ016QXROVEFnTXpBZ05UQXRNekFnTVRWNmJUQWdNVEJzTFRNd0xURTFJRE13SURFMUlETXdMVEUxTFRNd0lERTFlaUlnWm1sc2JEMGlJelJCTlRVMk9DSWdabWxzYkMxdmNHRmphWFI1UFNJd0xqSWlMejQ4Y0dGMGFDQmtQU0pOTXpBd0lEUXdNR3d0TWpBZ01UQjJMVEl3YkRJd0xUTXdJREl3SURNd2RqSXdiQzB5TUMweE1Ib2lJR1pwYkd3OUlpTTBRVFUxTmpnaUlHWnBiR3d0YjNCaFkybDBlVDBpTUM0eUlpOCtQSFJsZUhRZ2VEMGlNalFpSUhrOUlqUTBJaUJtYjI1MExXWmhiV2xzZVQwaWMzbHpkR1Z0TFhWcExDQnpZVzV6TFhObGNtbG1JaUJtYjI1MExYTnBlbVU5SWpJeUlpQm1iMjUwTFhkbGFXZG9kRDBpTnpBd0lpQm1hV3hzUFNKM2FHbDBaU0lnYkdWMGRHVnlMWE53WVdOcGJtYzlJakF1TlNJK1ZtRnNhV1JoZEc5eUlFUmxjRzl6YVhROEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJamN3SWlCbWIyNTBMV1poYldsc2VUMGljM2x6ZEdWdExYVnBMQ0J6WVc1ekxYTmxjbWxtSWlCbWIyNTBMWE5wZW1VOUlqRTJJaUJtYVd4c1BTSWpRVEJCUlVNd0lqNUZWRWdnTWk0d0lGTjBZV3RwYm1jOEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJakV6TUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE1pSWdabWxzYkQwaUl6Y3hPREE1TmlJK1YybDBhR1J5WVhkaGJDQkJaR1J5WlhOelBDOTBaWGgwUGp4MFpYaDBJSGc5SWpJMElpQjVQU0l4T0RBaUlHWnZiblF0Wm1GdGFXeDVQU0p0YjI1dmMzQmhZMlVpSUdadmJuUXRjMmw2WlQwaU1USWlJR1pwYkd3OUlpTTNNVGd3T1RZaVBsZHBkR2hrY21GM1lXd2dRM0psWkdWdWRHbGhiSE04TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqSXpNQ0lnWm05dWRDMW1ZVzFwYkhrOUltMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TWlJZ1ptbHNiRDBpSXpjeE9EQTVOaUkrVUhWaWJHbGpJRXRsZVR3dmRHVjRkRDQ4ZEdWNGRDQjRQU0l5TkNJZ2VUMGlNamd3SWlCbWIyNTBMV1poYldsc2VUMGliVzl1YjNOd1lXTmxJaUJtYjI1MExYTnBlbVU5SWpFeUlpQm1hV3hzUFNJak56RTRNRGsySWo1VGFXZHVZWFIxY21VOEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJak16TUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE1pSWdabWxzYkQwaUl6Y3hPREE1TmlJK1JHVndiM05wZENCRVlYUmhJRkp2YjNROEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJak00TUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE1pSWdabWxzYkQwaUl6Y3hPREE1TmlJK1UzUmhkSFZ6UEM5MFpYaDBQangwWlhoMElIZzlJakkwSWlCNVBTSXhOVEFpSUdadmJuUXRabUZ0YVd4NVBTSnRiMjV2YzNCaFkyVWlJR1p2Ym5RdGMybDZaVDBpTVRRaUlHWnBiR3c5SWlORk1rVTRSakFpUGpCNE5HUXhZalF3Wm1JeVpHUTVOV1EwT0dOak5qVTNOREZsTUdNNE5qUTFPVEl4TnpobU1UTXdPVHd2ZEdWNGRENDhkR1Y0ZENCNFBTSXlOQ0lnZVQwaU1qQXdJaUJtYjI1MExXWmhiV2xzZVQwaWJXOXViM053WVdObElpQm1iMjUwTFhOcGVtVTlJakUwSWlCbWFXeHNQU0lqUlRKRk9FWXdJajR3ZURBeE1EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNRFJrTVdJME1HWmlNbVJrT1RWa05EaGpZelkxTnpReFpUQmpPRFkwTlRreU1UYzRaakV6TURrOEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJakkxTUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE5DSWdabWxzYkQwaUkwVXlSVGhHTUNJK0xUd3ZkR1Y0ZEQ0OGRHVjRkQ0I0UFNJeU5DSWdlVDBpTXpBd0lpQm1iMjUwTFdaaGJXbHNlVDBpYlc5dWIzTndZV05sSWlCbWIyNTBMWE5wZW1VOUlqRTBJaUJtYVd4c1BTSWpSVEpGT0VZd0lqNHRQQzkwWlhoMFBqeDBaWGgwSUhnOUlqSTBJaUI1UFNJek5UQWlJR1p2Ym5RdFptRnRhV3g1UFNKdGIyNXZjM0JoWTJVaUlHWnZiblF0YzJsNlpUMGlNVFFpSUdacGJHdzlJaU5GTWtVNFJqQWlQaTA4TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqUXdNQ0lnWm05dWRDMW1ZVzFwYkhrOUltMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TkNJZ1ptbHNiRDBpSTBVeVJUaEdNQ0krVW1WeGRXVnpkR1ZrUEM5MFpYaDBQanhuSUhSeVlXNXpabTl5YlQwaWRISmhibk5zWVhSbEtETXlNQ3cxTUNraVBqeGphWEpqYkdVZ1kzZzlJakFpSUdONVBTSXhOQ0lnY2owaU5pSWdabWxzYkQwaUl6UTRRa0kzT0NJdlBqeGphWEpqYkdVZ1kzZzlJakUySWlCamVUMGlNVFFpSUhJOUlqUWlJR1pwYkd3OUlpTTBRVFUxTmpnaUx6NDhZMmx5WTJ4bElHTjRQU0l6TWlJZ1kzazlJakUwSWlCeVBTSTBJaUJtYVd4c1BTSWpORUUxTlRZNElpOCtQR05wY21Oc1pTQmplRDBpTkRnaUlHTjVQU0l4TkNJZ2NqMGlOQ0lnWm1sc2JEMGlJelJCTlRVMk9DSXZQand2Wno0OFp5Qm1hV3hzUFNJak5EaENRamM0SWo0OGNHRjBhQ0JrUFNKTk16WXdJREV6T0NCc05DQTBJR3c0SUMwNElpQnpkSEp2YTJVOUlpTTBPRUpDTnpnaUlITjBjbTlyWlMxM2FXUjBhRDBpTWlJZ1ptbHNiRDBpYm05dVpTSXZQanh3WVhSb0lHUTlJazB6TmpBZ01UZzRJR3cwSURRZ2JEZ2dMVGdpSUhOMGNtOXJaVDBpSXpRNFFrSTNPQ0lnYzNSeWIydGxMWGRwWkhSb1BTSXlJaUJtYVd4c1BTSnViMjVsSWk4K1BIQmhkR2dnWkQwaVRUTTJNQ0F6T0RnZ2JEUWdOQ0JzT0NBdE9DSWdjM1J5YjJ0bFBTSWpORGhDUWpjNElpQnpkSEp2YTJVdGQybGtkR2c5SWpJaUlHWnBiR3c5SW01dmJtVWlMejQ4TDJjK1BDOXpkbWMrIn0=";
    string constant ASSIGNED_URI =
        "data:application/json;base64,eyJuYW1lIjogIlZhbGlkYXRvciBEZXBvc2l0ICMxIiwgImRlc2NyaXB0aW9uIjogIkEgVmFsaWRhdG9yIERlcG9zaXQgTkZUIHJlcHJlc2VudGluZyBhIDMyIEVUSCBkZXBvc2l0LiBDdXJyZW50IHN0YXRlOiBBc3NpZ25lZCIsICJpbWFnZSI6ICJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSFpwWlhkQ2IzZzlJakFnTUNBME1EQWdORFl3SWo0OGNtVmpkQ0IzYVdSMGFEMGlOREF3SWlCb1pXbG5hSFE5SWpRMk1DSWdjbmc5SWpFeUlpQm1hV3hzUFNJak1rVXlSVEpGSWlCemRISnZhMlU5SWlOR05rVXdOVVVpSUhOMGNtOXJaUzEzYVdSMGFEMGlNaUl2UGp4d1lYUm9JR1E5SWsweE1pQXlJR2d6TnpZZ1lURXdMREV3SURBZ01DQXhJREV3TERFd0lIWTROeUJvTFRNNU5pQjJMVGczSUdFeE1Dd3hNQ0F3SURBZ01TQXhNQ3d0TVRBaUlHWnBiR3c5SWlNeFFURkJNVUVpTHo0OGNHRjBhQ0JrUFNKTk1UQXdJREUyTUd3dE16QXRNVFVnTXpBdE5UQWdNekFnTlRBdE16QWdNVFY2YlRBZ01UQnNMVE13TFRFMUlETXdJREUxSURNd0xURTFMVE13SURFMWVpSWdabWxzYkQwaUl6UkJOVFUyT0NJZ1ptbHNiQzF2Y0dGamFYUjVQU0l3TGpJaUx6NDhjR0YwYUNCa1BTSk5NekF3SURRd01Hd3RNakFnTVRCMkxUSXdiREl3TFRNd0lESXdJRE13ZGpJd2JDMHlNQzB4TUhvaUlHWnBiR3c5SWlNMFFUVTFOamdpSUdacGJHd3RiM0JoWTJsMGVUMGlNQzR5SWk4K1BIUmxlSFFnZUQwaU1qUWlJSGs5SWpRMElpQm1iMjUwTFdaaGJXbHNlVDBpYzNsemRHVnRMWFZwTENCellXNXpMWE5sY21sbUlpQm1iMjUwTFhOcGVtVTlJakl5SWlCbWIyNTBMWGRsYVdkb2REMGlOekF3SWlCbWFXeHNQU0ozYUdsMFpTSWdiR1YwZEdWeUxYTndZV05wYm1jOUlqQXVOU0krVm1Gc2FXUmhkRzl5SUVSbGNHOXphWFE4TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqY3dJaUJtYjI1MExXWmhiV2xzZVQwaWMzbHpkR1Z0TFhWcExDQnpZVzV6TFhObGNtbG1JaUJtYjI1MExYTnBlbVU5SWpFMklpQm1hV3hzUFNJalFUQkJSVU13SWo1RlZFZ2dNaTR3SUZOMFlXdHBibWM4TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqRXpNQ0lnWm05dWRDMW1ZVzFwYkhrOUltMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TWlJZ1ptbHNiRDBpSXpjeE9EQTVOaUkrVjJsMGFHUnlZWGRoYkNCQlpHUnlaWE56UEM5MFpYaDBQangwWlhoMElIZzlJakkwSWlCNVBTSXhPREFpSUdadmJuUXRabUZ0YVd4NVBTSnRiMjV2YzNCaFkyVWlJR1p2Ym5RdGMybDZaVDBpTVRJaUlHWnBiR3c5SWlNM01UZ3dPVFlpUGxkcGRHaGtjbUYzWVd3Z1EzSmxaR1Z1ZEdsaGJITThMM1JsZUhRK1BIUmxlSFFnZUQwaU1qUWlJSGs5SWpJek1DSWdabTl1ZEMxbVlXMXBiSGs5SW0xdmJtOXpjR0ZqWlNJZ1ptOXVkQzF6YVhwbFBTSXhNaUlnWm1sc2JEMGlJemN4T0RBNU5pSStVSFZpYkdsaklFdGxlVHd2ZEdWNGRENDhkR1Y0ZENCNFBTSXlOQ0lnZVQwaU1qZ3dJaUJtYjI1MExXWmhiV2xzZVQwaWJXOXViM053WVdObElpQm1iMjUwTFhOcGVtVTlJakV5SWlCbWFXeHNQU0lqTnpFNE1EazJJajVUYVdkdVlYUjFjbVU4TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqTXpNQ0lnWm05dWRDMW1ZVzFwYkhrOUltMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TWlJZ1ptbHNiRDBpSXpjeE9EQTVOaUkrUkdWd2IzTnBkQ0JFWVhSaElGSnZiM1E4TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqTTRNQ0lnWm05dWRDMW1ZVzFwYkhrOUltMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TWlJZ1ptbHNiRDBpSXpjeE9EQTVOaUkrVTNSaGRIVnpQQzkwWlhoMFBqeDBaWGgwSUhnOUlqSTBJaUI1UFNJeE5UQWlJR1p2Ym5RdFptRnRhV3g1UFNKdGIyNXZjM0JoWTJVaUlHWnZiblF0YzJsNlpUMGlNVFFpSUdacGJHdzlJaU5GTWtVNFJqQWlQakI0TkdReFlqUXdabUl5WkdRNU5XUTBPR05qTmpVM05ERmxNR000TmpRMU9USXhOemhtTVRNd09Ud3ZkR1Y0ZEQ0OGRHVjRkQ0I0UFNJeU5DSWdlVDBpTWpBd0lpQm1iMjUwTFdaaGJXbHNlVDBpYlc5dWIzTndZV05sSWlCbWIyNTBMWE5wZW1VOUlqRTBJaUJtYVd4c1BTSWpSVEpGT0VZd0lqNHdlREF4TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EUmtNV0kwTUdaaU1tUmtPVFZrTkRoall6WTFOelF4WlRCak9EWTBOVGt5TVRjNFpqRXpNRGs4TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqSTFNQ0lnWm05dWRDMW1ZVzFwYkhrOUltMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TkNJZ1ptbHNiRDBpSTBVeVJUaEdNQ0krTUhnd01EQXdMaTR1T0RnNE9Ed3ZkR1Y0ZEQ0OGRHVjRkQ0I0UFNJeU5DSWdlVDBpTXpBd0lpQm1iMjUwTFdaaGJXbHNlVDBpYlc5dWIzTndZV05sSWlCbWIyNTBMWE5wZW1VOUlqRTBJaUJtYVd4c1BTSWpSVEpGT0VZd0lqNHdlREF3TURBdUxpNDVPVGs1UEM5MFpYaDBQangwWlhoMElIZzlJakkwSWlCNVBTSXpOVEFpSUdadmJuUXRabUZ0YVd4NVBTSnRiMjV2YzNCaFkyVWlJR1p2Ym5RdGMybDZaVDBpTVRRaUlHWnBiR3c5SWlORk1rVTRSakFpUGkwOEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJalF3TUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE5DSWdabWxzYkQwaUkwVXlSVGhHTUNJK1FYTnphV2R1WldROEwzUmxlSFErUEdjZ2RISmhibk5tYjNKdFBTSjBjbUZ1YzJ4aGRHVW9Nekl3TERVd0tTSStQR05wY21Oc1pTQmplRDBpTUNJZ1kzazlJakUwSWlCeVBTSTBJaUJtYVd4c1BTSWpORGhDUWpjNElpOCtQR05wY21Oc1pTQmplRDBpTVRZaUlHTjVQU0l4TkNJZ2NqMGlOaUlnWm1sc2JEMGlJelE0UWtJM09DSXZQanhqYVhKamJHVWdZM2c5SWpNeUlpQmplVDBpTVRRaUlISTlJalFpSUdacGJHdzlJaU0wUVRVMU5qZ2lMejQ4WTJseVkyeGxJR040UFNJME9DSWdZM2s5SWpFMElpQnlQU0kwSWlCbWFXeHNQU0lqTkVFMU5UWTRJaTgrUEM5blBqeG5JR1pwYkd3OUlpTTBPRUpDTnpnaVBqeHdZWFJvSUdROUlrMHpOakFnTVRNNElHdzBJRFFnYkRnZ0xUZ2lJSE4wY205clpUMGlJelE0UWtJM09DSWdjM1J5YjJ0bExYZHBaSFJvUFNJeUlpQm1hV3hzUFNKdWIyNWxJaTgrUEhCaGRHZ2daRDBpVFRNMk1DQXhPRGdnYkRRZ05DQnNPQ0F0T0NJZ2MzUnliMnRsUFNJak5EaENRamM0SWlCemRISnZhMlV0ZDJsa2RHZzlJaklpSUdacGJHdzlJbTV2Ym1VaUx6NDhjR0YwYUNCa1BTSk5Nell3SURJek9DQnNOQ0EwSUd3NElDMDRJaUJ6ZEhKdmEyVTlJaU0wT0VKQ056Z2lJSE4wY205clpTMTNhV1IwYUQwaU1pSWdabWxzYkQwaWJtOXVaU0l2UGp4d1lYUm9JR1E5SWswek5qQWdNamc0SUd3MElEUWdiRGdnTFRnaUlITjBjbTlyWlQwaUl6UTRRa0kzT0NJZ2MzUnliMnRsTFhkcFpIUm9QU0l5SWlCbWFXeHNQU0p1YjI1bElpOCtQSEJoZEdnZ1pEMGlUVE0yTUNBek9EZ2diRFFnTkNCc09DQXRPQ0lnYzNSeWIydGxQU0lqTkRoQ1FqYzRJaUJ6ZEhKdmEyVXRkMmxrZEdnOUlqSWlJR1pwYkd3OUltNXZibVVpTHo0OEwyYytQQzl6ZG1jKyJ9";
    string constant CONFIRMED_URI =
        "data:application/json;base64,eyJuYW1lIjogIlZhbGlkYXRvciBEZXBvc2l0ICMxIiwgImRlc2NyaXB0aW9uIjogIkEgVmFsaWRhdG9yIERlcG9zaXQgTkZUIHJlcHJlc2VudGluZyBhIDMyIEVUSCBkZXBvc2l0LiBDdXJyZW50IHN0YXRlOiBDb25maXJtZWQiLCAiaW1hZ2UiOiAiZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhacFpYZENiM2c5SWpBZ01DQTBNREFnTkRZd0lqNDhjbVZqZENCM2FXUjBhRDBpTkRBd0lpQm9aV2xuYUhROUlqUTJNQ0lnY25nOUlqRXlJaUJtYVd4c1BTSWpNa1V5UlRKRklpQnpkSEp2YTJVOUlpTkdOa1V3TlVVaUlITjBjbTlyWlMxM2FXUjBhRDBpTWlJdlBqeHdZWFJvSUdROUlrMHhNaUF5SUdnek56WWdZVEV3TERFd0lEQWdNQ0F4SURFd0xERXdJSFk0TnlCb0xUTTVOaUIyTFRnM0lHRXhNQ3d4TUNBd0lEQWdNU0F4TUN3dE1UQWlJR1pwYkd3OUlpTXhRVEZCTVVFaUx6NDhjR0YwYUNCa1BTSk5NVEF3SURFMk1Hd3RNekF0TVRVZ016QXROVEFnTXpBZ05UQXRNekFnTVRWNmJUQWdNVEJzTFRNd0xURTFJRE13SURFMUlETXdMVEUxTFRNd0lERTFlaUlnWm1sc2JEMGlJelJCTlRVMk9DSWdabWxzYkMxdmNHRmphWFI1UFNJd0xqSWlMejQ4Y0dGMGFDQmtQU0pOTXpBd0lEUXdNR3d0TWpBZ01UQjJMVEl3YkRJd0xUTXdJREl3SURNd2RqSXdiQzB5TUMweE1Ib2lJR1pwYkd3OUlpTTBRVFUxTmpnaUlHWnBiR3d0YjNCaFkybDBlVDBpTUM0eUlpOCtQSFJsZUhRZ2VEMGlNalFpSUhrOUlqUTBJaUJtYjI1MExXWmhiV2xzZVQwaWMzbHpkR1Z0TFhWcExDQnpZVzV6TFhObGNtbG1JaUJtYjI1MExYTnBlbVU5SWpJeUlpQm1iMjUwTFhkbGFXZG9kRDBpTnpBd0lpQm1hV3hzUFNKM2FHbDBaU0lnYkdWMGRHVnlMWE53WVdOcGJtYzlJakF1TlNJK1ZtRnNhV1JoZEc5eUlFUmxjRzl6YVhROEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJamN3SWlCbWIyNTBMV1poYldsc2VUMGljM2x6ZEdWdExYVnBMQ0J6WVc1ekxYTmxjbWxtSWlCbWIyNTBMWE5wZW1VOUlqRTJJaUJtYVd4c1BTSWpRVEJCUlVNd0lqNUZWRWdnTWk0d0lGTjBZV3RwYm1jOEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJakV6TUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE1pSWdabWxzYkQwaUl6Y3hPREE1TmlJK1YybDBhR1J5WVhkaGJDQkJaR1J5WlhOelBDOTBaWGgwUGp4MFpYaDBJSGc5SWpJMElpQjVQU0l4T0RBaUlHWnZiblF0Wm1GdGFXeDVQU0p0YjI1dmMzQmhZMlVpSUdadmJuUXRjMmw2WlQwaU1USWlJR1pwYkd3OUlpTTNNVGd3T1RZaVBsZHBkR2hrY21GM1lXd2dRM0psWkdWdWRHbGhiSE04TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqSXpNQ0lnWm05dWRDMW1ZVzFwYkhrOUltMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TWlJZ1ptbHNiRDBpSXpjeE9EQTVOaUkrVUhWaWJHbGpJRXRsZVR3dmRHVjRkRDQ4ZEdWNGRDQjRQU0l5TkNJZ2VUMGlNamd3SWlCbWIyNTBMV1poYldsc2VUMGliVzl1YjNOd1lXTmxJaUJtYjI1MExYTnBlbVU5SWpFeUlpQm1hV3hzUFNJak56RTRNRGsySWo1VGFXZHVZWFIxY21VOEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJak16TUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE1pSWdabWxzYkQwaUl6Y3hPREE1TmlJK1JHVndiM05wZENCRVlYUmhJRkp2YjNROEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJak00TUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE1pSWdabWxzYkQwaUl6Y3hPREE1TmlJK1UzUmhkSFZ6UEM5MFpYaDBQangwWlhoMElIZzlJakkwSWlCNVBTSXhOVEFpSUdadmJuUXRabUZ0YVd4NVBTSnRiMjV2YzNCaFkyVWlJR1p2Ym5RdGMybDZaVDBpTVRRaUlHWnBiR3c5SWlORk1rVTRSakFpUGpCNE5HUXhZalF3Wm1JeVpHUTVOV1EwT0dOak5qVTNOREZsTUdNNE5qUTFPVEl4TnpobU1UTXdPVHd2ZEdWNGRENDhkR1Y0ZENCNFBTSXlOQ0lnZVQwaU1qQXdJaUJtYjI1MExXWmhiV2xzZVQwaWJXOXViM053WVdObElpQm1iMjUwTFhOcGVtVTlJakUwSWlCbWFXeHNQU0lqUlRKRk9FWXdJajR3ZURBeE1EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNRFJrTVdJME1HWmlNbVJrT1RWa05EaGpZelkxTnpReFpUQmpPRFkwTlRreU1UYzRaakV6TURrOEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJakkxTUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE5DSWdabWxzYkQwaUkwVXlSVGhHTUNJK01IZ3dNREF3TGk0dU9EZzRPRHd2ZEdWNGRENDhkR1Y0ZENCNFBTSXlOQ0lnZVQwaU16QXdJaUJtYjI1MExXWmhiV2xzZVQwaWJXOXViM053WVdObElpQm1iMjUwTFhOcGVtVTlJakUwSWlCbWFXeHNQU0lqUlRKRk9FWXdJajR3ZURBd01EQXVMaTQ1T1RrNVBDOTBaWGgwUGp4MFpYaDBJSGc5SWpJMElpQjVQU0l6TlRBaUlHWnZiblF0Wm1GdGFXeDVQU0p0YjI1dmMzQmhZMlVpSUdadmJuUXRjMmw2WlQwaU1UUWlJR1pwYkd3OUlpTkZNa1U0UmpBaVBqQjRNRFZqTXk0dUxtWTRORFU4TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqUXdNQ0lnWm05dWRDMW1ZVzFwYkhrOUltMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TkNJZ1ptbHNiRDBpSTBVeVJUaEdNQ0krUTI5dVptbHliV1ZrUEM5MFpYaDBQanhuSUhSeVlXNXpabTl5YlQwaWRISmhibk5zWVhSbEtETXlNQ3cxTUNraVBqeGphWEpqYkdVZ1kzZzlJakFpSUdONVBTSXhOQ0lnY2owaU5DSWdabWxzYkQwaUl6UTRRa0kzT0NJdlBqeGphWEpqYkdVZ1kzZzlJakUySWlCamVUMGlNVFFpSUhJOUlqUWlJR1pwYkd3OUlpTTBPRUpDTnpnaUx6NDhZMmx5WTJ4bElHTjRQU0l6TWlJZ1kzazlJakUwSWlCeVBTSTJJaUJtYVd4c1BTSWpORGhDUWpjNElpOCtQR05wY21Oc1pTQmplRDBpTkRnaUlHTjVQU0l4TkNJZ2NqMGlOQ0lnWm1sc2JEMGlJelJCTlRVMk9DSXZQand2Wno0OFp5Qm1hV3hzUFNJak5EaENRamM0SWo0OGNHRjBhQ0JrUFNKTk16WXdJREV6T0NCc05DQTBJR3c0SUMwNElpQnpkSEp2YTJVOUlpTTBPRUpDTnpnaUlITjBjbTlyWlMxM2FXUjBhRDBpTWlJZ1ptbHNiRDBpYm05dVpTSXZQanh3WVhSb0lHUTlJazB6TmpBZ01UZzRJR3cwSURRZ2JEZ2dMVGdpSUhOMGNtOXJaVDBpSXpRNFFrSTNPQ0lnYzNSeWIydGxMWGRwWkhSb1BTSXlJaUJtYVd4c1BTSnViMjVsSWk4K1BIQmhkR2dnWkQwaVRUTTJNQ0F5TXpnZ2JEUWdOQ0JzT0NBdE9DSWdjM1J5YjJ0bFBTSWpORGhDUWpjNElpQnpkSEp2YTJVdGQybGtkR2c5SWpJaUlHWnBiR3c5SW01dmJtVWlMejQ4Y0dGMGFDQmtQU0pOTXpZd0lESTRPQ0JzTkNBMElHdzRJQzA0SWlCemRISnZhMlU5SWlNME9FSkNOemdpSUhOMGNtOXJaUzEzYVdSMGFEMGlNaUlnWm1sc2JEMGlibTl1WlNJdlBqeHdZWFJvSUdROUlrMHpOakFnTXpNNElHdzBJRFFnYkRnZ0xUZ2lJSE4wY205clpUMGlJelE0UWtJM09DSWdjM1J5YjJ0bExYZHBaSFJvUFNJeUlpQm1hV3hzUFNKdWIyNWxJaTgrUEhCaGRHZ2daRDBpVFRNMk1DQXpPRGdnYkRRZ05DQnNPQ0F0T0NJZ2MzUnliMnRsUFNJak5EaENRamM0SWlCemRISnZhMlV0ZDJsa2RHZzlJaklpSUdacGJHdzlJbTV2Ym1VaUx6NDhMMmMrUEM5emRtYysifQ==";
    string constant FINALIZED_URI =
        "data:application/json;base64,eyJuYW1lIjogIlZhbGlkYXRvciBEZXBvc2l0ICMxIiwgImRlc2NyaXB0aW9uIjogIkEgVmFsaWRhdG9yIERlcG9zaXQgTkZUIHJlcHJlc2VudGluZyBhIDMyIEVUSCBkZXBvc2l0LiBDdXJyZW50IHN0YXRlOiBGaW5hbGl6ZWQiLCAiaW1hZ2UiOiAiZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhacFpYZENiM2c5SWpBZ01DQTBNREFnTkRZd0lqNDhjbVZqZENCM2FXUjBhRDBpTkRBd0lpQm9aV2xuYUhROUlqUTJNQ0lnY25nOUlqRXlJaUJtYVd4c1BTSWpNa1V5UlRKRklpQnpkSEp2YTJVOUlpTkdOa1V3TlVVaUlITjBjbTlyWlMxM2FXUjBhRDBpTWlJdlBqeHdZWFJvSUdROUlrMHhNaUF5SUdnek56WWdZVEV3TERFd0lEQWdNQ0F4SURFd0xERXdJSFk0TnlCb0xUTTVOaUIyTFRnM0lHRXhNQ3d4TUNBd0lEQWdNU0F4TUN3dE1UQWlJR1pwYkd3OUlpTXhRVEZCTVVFaUx6NDhjR0YwYUNCa1BTSk5NVEF3SURFMk1Hd3RNekF0TVRVZ016QXROVEFnTXpBZ05UQXRNekFnTVRWNmJUQWdNVEJzTFRNd0xURTFJRE13SURFMUlETXdMVEUxTFRNd0lERTFlaUlnWm1sc2JEMGlJelJCTlRVMk9DSWdabWxzYkMxdmNHRmphWFI1UFNJd0xqSWlMejQ4Y0dGMGFDQmtQU0pOTXpBd0lEUXdNR3d0TWpBZ01UQjJMVEl3YkRJd0xUTXdJREl3SURNd2RqSXdiQzB5TUMweE1Ib2lJR1pwYkd3OUlpTTBRVFUxTmpnaUlHWnBiR3d0YjNCaFkybDBlVDBpTUM0eUlpOCtQSFJsZUhRZ2VEMGlNalFpSUhrOUlqUTBJaUJtYjI1MExXWmhiV2xzZVQwaWMzbHpkR1Z0TFhWcExDQnpZVzV6TFhObGNtbG1JaUJtYjI1MExYTnBlbVU5SWpJeUlpQm1iMjUwTFhkbGFXZG9kRDBpTnpBd0lpQm1hV3hzUFNKM2FHbDBaU0lnYkdWMGRHVnlMWE53WVdOcGJtYzlJakF1TlNJK1ZtRnNhV1JoZEc5eUlFUmxjRzl6YVhROEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJamN3SWlCbWIyNTBMV1poYldsc2VUMGljM2x6ZEdWdExYVnBMQ0J6WVc1ekxYTmxjbWxtSWlCbWIyNTBMWE5wZW1VOUlqRTJJaUJtYVd4c1BTSWpRVEJCUlVNd0lqNUZWRWdnTWk0d0lGTjBZV3RwYm1jOEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJakV6TUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE1pSWdabWxzYkQwaUl6Y3hPREE1TmlJK1YybDBhR1J5WVhkaGJDQkJaR1J5WlhOelBDOTBaWGgwUGp4MFpYaDBJSGc5SWpJMElpQjVQU0l4T0RBaUlHWnZiblF0Wm1GdGFXeDVQU0p0YjI1dmMzQmhZMlVpSUdadmJuUXRjMmw2WlQwaU1USWlJR1pwYkd3OUlpTTNNVGd3T1RZaVBsZHBkR2hrY21GM1lXd2dRM0psWkdWdWRHbGhiSE04TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqSXpNQ0lnWm05dWRDMW1ZVzFwYkhrOUltMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TWlJZ1ptbHNiRDBpSXpjeE9EQTVOaUkrVUhWaWJHbGpJRXRsZVR3dmRHVjRkRDQ4ZEdWNGRDQjRQU0l5TkNJZ2VUMGlNamd3SWlCbWIyNTBMV1poYldsc2VUMGliVzl1YjNOd1lXTmxJaUJtYjI1MExYTnBlbVU5SWpFeUlpQm1hV3hzUFNJak56RTRNRGsySWo1VGFXZHVZWFIxY21VOEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJak16TUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE1pSWdabWxzYkQwaUl6Y3hPREE1TmlJK1JHVndiM05wZENCRVlYUmhJRkp2YjNROEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJak00TUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE1pSWdabWxzYkQwaUl6Y3hPREE1TmlJK1UzUmhkSFZ6UEM5MFpYaDBQangwWlhoMElIZzlJakkwSWlCNVBTSXhOVEFpSUdadmJuUXRabUZ0YVd4NVBTSnRiMjV2YzNCaFkyVWlJR1p2Ym5RdGMybDZaVDBpTVRRaUlHWnBiR3c5SWlORk1rVTRSakFpUGpCNE5HUXhZalF3Wm1JeVpHUTVOV1EwT0dOak5qVTNOREZsTUdNNE5qUTFPVEl4TnpobU1UTXdPVHd2ZEdWNGRENDhkR1Y0ZENCNFBTSXlOQ0lnZVQwaU1qQXdJaUJtYjI1MExXWmhiV2xzZVQwaWJXOXViM053WVdObElpQm1iMjUwTFhOcGVtVTlJakUwSWlCbWFXeHNQU0lqUlRKRk9FWXdJajR3ZURBeE1EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNRFJrTVdJME1HWmlNbVJrT1RWa05EaGpZelkxTnpReFpUQmpPRFkwTlRreU1UYzRaakV6TURrOEwzUmxlSFErUEhSbGVIUWdlRDBpTWpRaUlIazlJakkxTUNJZ1ptOXVkQzFtWVcxcGJIazlJbTF2Ym05emNHRmpaU0lnWm05dWRDMXphWHBsUFNJeE5DSWdabWxzYkQwaUkwVXlSVGhHTUNJK01IZ3dNREF3TGk0dU9EZzRPRHd2ZEdWNGRENDhkR1Y0ZENCNFBTSXlOQ0lnZVQwaU16QXdJaUJtYjI1MExXWmhiV2xzZVQwaWJXOXViM053WVdObElpQm1iMjUwTFhOcGVtVTlJakUwSWlCbWFXeHNQU0lqUlRKRk9FWXdJajR3ZURBd01EQXVMaTQ1T1RrNVBDOTBaWGgwUGp4MFpYaDBJSGc5SWpJMElpQjVQU0l6TlRBaUlHWnZiblF0Wm1GdGFXeDVQU0p0YjI1dmMzQmhZMlVpSUdadmJuUXRjMmw2WlQwaU1UUWlJR1pwYkd3OUlpTkZNa1U0UmpBaVBqQjRNRFZqTXk0dUxtWTRORFU4TDNSbGVIUStQSFJsZUhRZ2VEMGlNalFpSUhrOUlqUXdNQ0lnWm05dWRDMW1ZVzFwYkhrOUltMXZibTl6Y0dGalpTSWdabTl1ZEMxemFYcGxQU0l4TkNJZ1ptbHNiRDBpSTBVeVJUaEdNQ0krUm1sdVlXeHBlbVZrUEM5MFpYaDBQanhuSUhSeVlXNXpabTl5YlQwaWRISmhibk5zWVhSbEtETXlNQ3cxTUNraVBqeGphWEpqYkdVZ1kzZzlJakFpSUdONVBTSXhOQ0lnY2owaU5DSWdabWxzYkQwaUl6UTRRa0kzT0NJdlBqeGphWEpqYkdVZ1kzZzlJakUySWlCamVUMGlNVFFpSUhJOUlqUWlJR1pwYkd3OUlpTTBPRUpDTnpnaUx6NDhZMmx5WTJ4bElHTjRQU0l6TWlJZ1kzazlJakUwSWlCeVBTSTBJaUJtYVd4c1BTSWpORGhDUWpjNElpOCtQR05wY21Oc1pTQmplRDBpTkRnaUlHTjVQU0l4TkNJZ2NqMGlOaUlnWm1sc2JEMGlJelE0UWtJM09DSXZQand2Wno0OFp5Qm1hV3hzUFNJak5EaENRamM0SWo0OGNHRjBhQ0JrUFNKTk16WXdJREV6T0NCc05DQTBJR3c0SUMwNElpQnpkSEp2YTJVOUlpTTBPRUpDTnpnaUlITjBjbTlyWlMxM2FXUjBhRDBpTWlJZ1ptbHNiRDBpYm05dVpTSXZQanh3WVhSb0lHUTlJazB6TmpBZ01UZzRJR3cwSURRZ2JEZ2dMVGdpSUhOMGNtOXJaVDBpSXpRNFFrSTNPQ0lnYzNSeWIydGxMWGRwWkhSb1BTSXlJaUJtYVd4c1BTSnViMjVsSWk4K1BIQmhkR2dnWkQwaVRUTTJNQ0F5TXpnZ2JEUWdOQ0JzT0NBdE9DSWdjM1J5YjJ0bFBTSWpORGhDUWpjNElpQnpkSEp2YTJVdGQybGtkR2c5SWpJaUlHWnBiR3c5SW01dmJtVWlMejQ4Y0dGMGFDQmtQU0pOTXpZd0lESTRPQ0JzTkNBMElHdzRJQzA0SWlCemRISnZhMlU5SWlNME9FSkNOemdpSUhOMGNtOXJaUzEzYVdSMGFEMGlNaUlnWm1sc2JEMGlibTl1WlNJdlBqeHdZWFJvSUdROUlrMHpOakFnTXpNNElHdzBJRFFnYkRnZ0xUZ2lJSE4wY205clpUMGlJelE0UWtJM09DSWdjM1J5YjJ0bExYZHBaSFJvUFNJeUlpQm1hV3hzUFNKdWIyNWxJaTgrUEhCaGRHZ2daRDBpVFRNMk1DQXpPRGdnYkRRZ05DQnNPQ0F0T0NJZ2MzUnliMnRsUFNJak5EaENRamM0SWlCemRISnZhMlV0ZDJsa2RHZzlJaklpSUdacGJHdzlJbTV2Ym1VaUx6NDhMMmMrUEM5emRtYysifQ==";

    address depositor;
    address withdrawalAddress;
    address operator;

    function setUp() public override {
        super.setUp();

        depositor = makeAddr("depositor");
        withdrawalAddress = makeAddr("withdrawalAddress");
        operator = makeAddr("operator");

        vm.deal(depositor, 100 ether);

        // Set operator
        vm.prank(deployer);
        nonfungibleDepositManager.setOperator(operator, true);
    }

    function test_TokenURIRequestedState() public {
        vm.startPrank(depositor);
        uint256 tokenId = nonfungibleDepositManager.requestDeposit{value: 32 ether}(withdrawalAddress);
        
        string memory uri = nonfungibleDepositManager.tokenURI(tokenId);
        console.log("Generated URI:");
        console.log(uri);
        console.log("Expected URI:");
        console.log(REQUESTED_URI);
        assertEq(uri, REQUESTED_URI, "URI mismatch in Requested state");
        vm.stopPrank();
    }

    function test_TokenURIAssignedState() public {
        vm.startPrank(depositor);
        uint256 tokenId = nonfungibleDepositManager.requestDeposit{value: 32 ether}(withdrawalAddress);
        vm.stopPrank();

        vm.prank(operator);
        nonfungibleDepositManager.assignValidator(tokenId, TEST_PUBKEY, TEST_SIGNATURE);
        
        string memory uri = nonfungibleDepositManager.tokenURI(tokenId);
        console.log("Generated URI:");
        console.log(uri);
        console.log("Expected URI:");
        console.log(ASSIGNED_URI);
        assertEq(uri, ASSIGNED_URI, "URI mismatch in Assigned state");
    }

    function test_TokenURIConfirmedState() public {
        vm.startPrank(depositor);
        uint256 tokenId = nonfungibleDepositManager.requestDeposit{value: 32 ether}(withdrawalAddress);
        vm.stopPrank();

        vm.prank(operator);
        nonfungibleDepositManager.assignValidator(tokenId, TEST_PUBKEY, TEST_SIGNATURE);

        vm.prank(withdrawalAddress);
        nonfungibleDepositManager.claimValidator(tokenId, TEST_DEPOSIT_DATA_ROOT);
        
        string memory uri = nonfungibleDepositManager.tokenURI(tokenId);
        console.log("Generated URI:");
        console.log(uri);
        console.log("Expected URI:");
        console.log(CONFIRMED_URI);
        assertEq(uri, CONFIRMED_URI, "URI mismatch in Confirmed state");
    }

    function test_TokenURIFinalizedState() public {
        vm.startPrank(depositor);
        uint256 tokenId = nonfungibleDepositManager.requestDeposit{value: 32 ether}(withdrawalAddress);
        vm.stopPrank();

        vm.prank(operator);
        nonfungibleDepositManager.assignValidator(tokenId, TEST_PUBKEY, TEST_SIGNATURE);

        vm.prank(withdrawalAddress);
        nonfungibleDepositManager.claimValidator(tokenId, TEST_DEPOSIT_DATA_ROOT);

        vm.prank(operator);
        nonfungibleDepositManager.issueValidator(tokenId);
        
        string memory uri = nonfungibleDepositManager.tokenURI(tokenId);
        console.log("Generated URI:");
        console.log(uri);
        console.log("Expected URI:");
        console.log(FINALIZED_URI);
        assertEq(uri, FINALIZED_URI, "URI mismatch in Finalized state");
    }

    function test_TokenURICancelledState() public {
        vm.startPrank(depositor);
        uint256 tokenId = nonfungibleDepositManager.requestDeposit{value: 32 ether}(withdrawalAddress);
        nonfungibleDepositManager.cancelDeposit(tokenId);
        vm.stopPrank();

        vm.expectRevert(abi.encodeWithSelector(ERC721NonexistentToken.selector, tokenId));
        nonfungibleDepositManager.tokenURI(tokenId);
    }
}
